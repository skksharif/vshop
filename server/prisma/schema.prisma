// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName      String
  userName      String   @unique
  email         String   @unique
  password      String
  phone         String   @unique
  creditBal     Float    @default(0.0)
  role          Role
  kycCard       String
  kycVerified   Boolean  @default(false)
  aadhaarPanUrl String?
  orders        Order[]
  carts         Cart[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique
  image    String
  products Product[]
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  images      String[]
  color       String
  sizes       String[]
  // sku         String      @unique
  isActive    Boolean     @default(true)
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String      @db.ObjectId
  variants    Variant[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  CartItem    CartItem[]
  OrderItem   OrderItem[]
}

model Variant {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  product   Product     @relation(fields: [productId], references: [id])
  productId String      @unique @db.ObjectId
  color     String?
  size      String?
  inventory Int
  price     Float?
  image     String?
  CartItem  CartItem[]
  OrderItem OrderItem[]
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  items     CartItem[]
  active    Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  variant   Variant? @relation(fields: [variantId], references: [id])
  variantId String?
  quantity  Int
  price     Float
}

model Order {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  items        OrderItem[]
  total        Float
  status       String      // e.g., 'pending', 'paid', 'shipped'
  paymentOption PaymentOption @default(FULL_PAYMENT)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  variant   Variant? @relation(fields: [variantId], references: [id])
  variantId String?
  quantity  Int
  price     Float
}

enum Role {
  USER
  ADMIN
}

enum PaymentOption {
  FULL_PAYMENT
  EMI_3_MONTH
  EMI_6_MONTH
}
